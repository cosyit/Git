Servlet and JSP

	感谢木木老师带我走进Servlet。
+-----------------------------------------------------------------------------------------------------------+
	客户端与服务器完整的会话过程：
	+--------------+
	|客户端http请求|
	+--------------+    
	+-----------+
	|request对象|-----------> 这个对象是由Servlet容器封装处理
	+-----------+
	+----------------+
	|服务器响应，处理|------> 调用service()方法
	+----------------+
	+------------+
	|response对象|----------> 这个对象同样由servlet容器封装处理，包含了需要回传的信息
	+------------+
	+--------------------------+
	|再通过http协议回传给客户端|
	+--------------------------+
	对于用户到达Servlet的请求，Servlet容器会创建特定于这个请求的ServletRequest对象和ServletResponse对象，
	然后调用Servlet的service方法。service方法从ServletRequest对象获得客户请求信息，处理该请求，并通过ServletResponse对象向客户返回响应信息。

+------------------------------------------------------------------------------------------------------------+

一、什么是Servlet
	
	指的是运行在服务器上的小程序。没有main方法，需要容器的支持。我们的Tomcat就是一个容器。
	通常，每个 Servlet 类在容器中只存在一个实例，每当请求到来时，则分配一条线程来处理该请求。但是Servlet并不是单例。

二、Servlet在Web应用程序中的位置
	                                                          +-----------------+	
	Web Brower ---------------------> HTTP Server ----------> | Servlet Program | -----------> DataBase 
	               HTTP Protocol                              +-----------------+

三、Servlet的生命周期
	Servlet中只定义了5个方法：（3+2）

	生命周期方法（3个）
	
		init()方法       进行初始化。这个init()方法，显然只会执行一次；
		service()方法    处理客户端请求。由容器调用，一般只用doGet(),doPost();
		destroy()方法    销毁Servlert对象。

		doGet()与doPost()方法特点：

			doGet()方法：
				1.数据量小；
				2.只能传输字符串；
				3.服务器随机接受GET方法的数据，一旦断电等原因，服务器也不知道信息是否发送完毕；
				4.由于get方式请求会将请求参数的名和值转换成字符串，并附在原URl之后，因此可以在地址栏上看见请求参数的名和值，安全性比较差。

			doPost()方法：
				1.数据量大；
				2.对数据类型没有限制；
				3.Post方法接受数据时，服务器先接受数据信息的长度，然后再接受数据，使用post方式，服务器可以知道数据是否完整。
				4.POST方式发送的请求参数以及对应的值放在html header中传输，安全性相对较高。

				简单地说，使用doPost()方法更好。


	最终，Servlet由JVM的垃圾回收器进行回收。

	非生命周期方法（2个）

		getServletInfo();
		getServletConfig();

四、Servlet的程序编写

	任何一个Servlet命名时，都需要以Servlet作为结尾，这是一种规范

	+---------------------------------------------------------------------------------------------------------------------+

五、什么是JSP？

	JSP(Java Server Pages)，是一种动态网页开发技术。作为Servlet的一种扩展。

六、JSP 9大内置对象及关系
	
	右边代表转译后对应的对象。什么是转译对象？我也不知道，暂时先了解存在这个对应关系。

	  9大内置对象 												   转译对象                                   

	+-------------+	    输出流，向客户端输出数据	+-------------------------------------+
	|     out     | <-----------------------------> |              jspWriter              |
	+-------------+                                 +-------------------------------------+

	+-------------+   该对象可以获取用户提交的信息  +-------------------------------------+
	|   request   | <-----------------------------> |  HttpServletRequest/ServletRequest  |
	+-------------+                                 +-------------------------------------+
	Servlet容器会创建一个请求对象ServletRequst，其中封装了用户请求的信息，以便处理客户端请求

	+-------------+	 动态的响应，向客户端发送数据   +-------------------------------------+
	|  response   | <-----------------------------> | HttpServletResponse/ServletResponse |
	+-------------+                                 +-------------------------------------+
	Servlet容器会创建一个响应对象ServletResponse，用于响应客户端请求，向客户端返回数据。

	+-------------+      代表该JSP的配置信息        +-------------------------------------+
	|   config    |	<-----------------------------> |           ServletConfig             | 
	+-------------+                                 +-------------------------------------+   
	JSP页面无需配置，多在Servlet中有效。

	+-------------+	    代表JSP所属的WEB应用本身	+-------------------------------------+
	| application |	<----------------------------->	|           ServletContext            |
	+-------------+                                 +-------------------------------------+


	+-------------+        用于会话期管理           +-------------------------------------+
	|   session   | <----------------------------->	|            HttpSession              |
	+-------------+                                 +-------------------------------------+


	+-------------+	 代表的是当前页面运行的一些属性	+-------------------------------------+
	| pageContext | <----------------------------->	|            PageContext              | 
	+-------------+                                 +-------------------------------------+
	pageContext对象很厉害，可以拿到其他8大对象

	+-------------+   代表其他页面中的异常和错误    +-------------------------------------+
	|  exception  | <----------------------------->	|             Throwable               |
	+-------------+                                 +-------------------------------------+
	错误页才有，非错误页只有8个内置对象，设置为errorpage

	+-------------+   对应this关键字。JSP网页本身   +-------------------------------------+
	|     page    | <-----------------------------> |                this                 | 
	+-------------+                                 +-------------------------------------+
	jsp中甚少使用

七、内置对象的一些细节

	1.关于Session

		a.什么是Session？
			是指一个用于保存服务器与用户会话信息的对象。是JSP的一个内置对象。

		b.什么是会话？
			从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话。

		c.Session在哪里？
			保存在服务器上。它是纯服务器数据，Session数据也不会发到客户端。

		d.Session的作用
			记忆与指定用户的会话
		在一个会话期间，保存用户与服务器的会话信息，并通过将一个String类型的ID发送到用户浏览器的cookies中，这样在用户
		再次访问服务器的时候，服务器通过这个唯一的id匹配到了原来的用户，可以继续在原来Session对象的基础上进行会话。

		e.Session的一些注意之处
			1.如果数据想在Session上进行读写，必须实现Serializable接口，不实现这个接口，只可以存储，但是读不出来。
			2.Session可能存在性能问题。由于JVM默认只有512MB内存，当数据量大的时候，有可能需要转存到二级存储（速度不会比内存快）。

		f.Session对象的一些常用方法
			getSession(boolean flag);    获得Session对象，flag值为true（默认），则在没有获取到Session对象的时候创建，为false则不创建；
			setAttribute(string，string);    设置一个属性的值；
			getAttribute(string);  			 获得一个属性的值，假如没有实现Serializable接口，是读不出来的。
		
		g.Session 的设置会话过期时间（come out）
			默认情况下，Session都会有一个会话过期时间(30min)，超过这个时间，那么会自动销毁这个Session对象。
			setMaxInactiveInterval();


八、cookie
	
	1.什么是cookie？
		是服务器返回的一个字符串信息，我们保存在本地，我们每次请求都需要把它发送给服务器。

	2.cookie的特点
		a.cookie保存在客户端；
		b.信息量少，放在head头部；
		c.用户可以在浏览器单禁用cookie；

	3.cookie方法
	

九、Servlet与JSP的关系
	JSP相当于Servlet的一种扩展，JSP主要是视图层，Servlet主要是控制层

十、作用域
	            +--------+      +-----------+       +-----------+      +---------------+    
	四个作用域：| page域 |      | request域 |       | session域 |      | application域 |   
	            +--------+      +-----------+       +-----------+      +---------------+    
	                1                 2                   3	                   4
	1.什么是作用域？
		作用域规定的是变量的有效期限。

十一、JSP中的指令（3大指令）
	1.page指令
		<%@ page attr1=”value1” atrr2=”value2”.......%>
		定义错误页面：isErrorPage="true"
		错误页面指向：errorpage = "  "，具体的页面名称

	2.include指令
		用于文件包含，该指令可以在一个JSP页面中包含另外一个文件中的内容，并且只能支持静态包含，意思是被包含文件的所有内容
		都被原样包含到时该JSP页面中，被包含的文件可以是一段Java代码，HTML代码，或者是另一个JSP页面
	
	3.taglib
		 taglib指令用于加载用户自定义标签，使用此指令后可以直接在JSP页面使用自定义标签。

十二、JSP中的动作（7大动作）
	
	就是一些java的操作；我们自己创建的类，需要提供setter/getter方法。

	1.实例化操作。定位或初始化一个JavaBeans组件
	<jsp:useBean id=”实例名” scope=”page|request|session|application” class=”完整类名” type=”数据类型”  beanName=””>
	  </jsp:userBean>
		
		用于在JSP页面中创建一个JavaBean实例，并通过属性设置将此实例存放在JSP指定范围内。class就是为了指定调用对应的构造器。
		
		实例化一个com.zsb.Test的实例， 名字叫mygit。
		例子：<jsp:useBean id="mygit" class="com.zsb.Test"></jsp:useBean>
		
		注意：class或beanName不能同时存在；
	
	2.设置实例属性
	<jsp:setProperty ></jsp:setProperty>

		例子：设置mygit实例的那么属性值
			<jsp:setProperty name="mygit" property="name" value="zsb"></jsp:setProperty>

	3.获取实例属性的值
	<jsp:getProperty></jsp:getProperty>

		例子：获得mygit实例的name属性的值
			<jsp:getProperty name="mygit" property="name"></jsp:getProperty>

		同时，也可以使用EL表达式，${mygit.name}获得需要的值，会自动调用实例的的getName()方法；

	4.




+-----------------------------------------------------------------------------------------------------------------------+

十三、jsp中的一些标签含义（已经不建议在jsp页面中出现任何java代码块了，要将显示与控制分离）

	<% %>               HTML元素中嵌入java代码，每一对<% %>代表一个jsp代码块，在里面定义的变量，只能在这个代码块内使用；
	<%! %>              jsp变量声明，相当于声明了全局变量
	<%= %>              jsp表达式，不要以分号结尾
	<%-- --%>           注释
	<%//>				java注释不会发到客户端