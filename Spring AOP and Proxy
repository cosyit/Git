Spring AOP and Proxy

	在这里，感谢木木老师的耐心指导，让我走进了AOP与Proxy的世界。(＾▽＾)
	
一、什么是AOP？
	
	面向切面编程(Aspect Oriented Programming)主要为了解决代码重复的问题，让我们可以更关注我们的核心业务。基于动态代理技术实现。

	看图说话，来了解一下我们的AOP的名词概念（其实我也是一脸懵，讲得不好）。概念是有那么点不好理解，但是要稳住。


			业务操作1				业务操作2				业务操作3

	+-----------------------------------------------------------------------+
	|   +---------------+		+---------------+		+---------------+   |
	|   |     操作1		|-------|     操作1	    |-------|     操作1	    |   | ------> 操作1切面
	|   +---------------+		+---------------+		+---------------+   |
	+-----------------------------------------------------------------------+
	+-----------------------------------------------------------------------+
	|   +---------------+		+---------------+		+---------------+   |
	|   |     操作2		|-------|     操作2	    |-------|     操作2	    |   | ------> 操作2切面
	|   +---------------+		+---------------+		+---------------+   |
	+-----------------------------------------------------------------------+
	+-----------------------------------------------------------------------+
	|   +---------------+		+---------------+		+---------------+   |
	|   |     操作3	    |-------|     操作3	    |-------|     操作3     |   | ------> 操作3切面
	|   +---------------+		+---------------+		+---------------+   |
	+-----------------------------------------------------------------------+
															          ------>连接点&切入点
		+---------------+		+---------------+		+---------------+
		| 核心业务操作1	|		| 核心业务操作2 |		| 核心业务操作3 |
		+---------------+		+---------------+		+---------------+	
															          ------>连接点&切入点
	+-----------------------------------------------------------------------+
	|   +---------------+		+---------------+		+---------------+   |
	|   |     操作4		|-------|     操作4     |-------|     操作4	    |   | ------> 操作4切面
	|   +---------------+		+---------------+		+---------------+   |
	+-----------------------------------------------------------------------+
	+-----------------------------------------------------------------------+
	|   +---------------+		+---------------+		+---------------+   |
	|   |     操作5		|-------|     操作5	    |-------|     操作5	    |   | ------> 操作5切面
	|   +---------------+		+---------------+		+---------------+   |
	+-----------------------------------------------------------------------+
								     。。。。

	1.切面（Aspect）：
	正如上图所示，切面其实就是同一类非核心业务所组成的一个面。

	2.横切关注点（cross cutting concerns）：
	组成一个切面的所有点

	3.连接点（join point）：
	一个类中的任何方法前后都是连接点。每一个方法前后（也包括异常等）都是连接点，插入具体通知的连接点就是切入点

	4.切入点（point cut）：
	切入点是具体的连接点，插入通知的地方
		
	5.通知（advice）：
	简单地理解为在连接点被拦截后要执行的代码，是切面的具体实现。通知分为前置通知、后置通知、异常通知、返回通知、环绕通知五类。

	6.目标对象：
	指要被织入切面的对象。

	7.代理对象：
	将通知应用到目标对象后，被动态创建的对象。

	8.织入：
	将切面应用到目标对象，从而创建一个新的代理对象的过程。

二、spring AOP

	刚开始接触spring AOP 的时候，我的头真的很大（当然，现在头也很大，毕竟，头大了不能缩小），主要还是基础不好，所以在学习过程中非常头大，
	看着各个神奇的注解很飘逸的出现，我的内心是崩溃的，我并不熟悉注解，很好奇为什么添加了注解就能达到我们的目的？为什么配置文件里要这样写？
	为什么...各种为什么，我的头就越来越大...不过，不能一直执意于先理解再使用的这种传统学习路线，毕竟我还要搬砖头生活，好吧，我就先学会怎么用，
	以后再理解吧。以下就是我苦苦挣扎之后理顺的一个AOP套路。反正跟着敲两遍吧，我们就能学会怎么用锤子了，至于锤子怎么做，以后再说吧，现在只希望锤子暂时不要坏吧。

	在spring中，使用AOP有两种方式：基于注解的方式、基于修改配置文件的方式

	以下都介绍基于注解的方式，也有两种

	1.基于注解的方式

		a.在我们的pom.xml中引入两个AspectJ依赖aspectjrt、aspectjweaver（也可以到官网上查找不同的版本）：
			<dependency>
	            <groupId>org.aspectj</groupId>
	            <artifactId>aspectjrt</artifactId>
	            <version>1.6.11</version>
	        </dependency>
	        <dependency>
	            <groupId>org.aspectj</groupId>
	            <artifactId>aspectjweaver</artifactId>
	            <version>1.6.11</version>
	        </dependency>

	        在获取了AspectJ相关的依赖后，我们就可以在我们的类里使用注解了。
	    
	    b.新建一个我们的业务类接口，定义相关的方法，面向接口编程嘛；
	    	package com.proxy.springProxy;

			public interface Calculator {
			    int add(int i, int j);
			    int minus(int i, int j);
			    int mul(int i, int j);
			    int div(int i, int j);
			}

	    c.新建一个业务接口的实现类，实现具体方法；在类名称上添加 @Component("name") 注解，name代表名字。声明这是一个组件。添加这个注解用于被扫描；

	    	package com.proxy.springProxy;

				import org.springframework.stereotype.Component;

				@Component("cc")
				public class CalculatorClass implements  Calculator{

				    @Override
				    public int add(int i, int j) {
				        int result = i + j ;
				        System.out.println(result);
				        return result;
				    }

				    @Override
				    public int minus(int i, int j) {
				        int result = i - j ;
				        System.out.println(result);
				        return result;
				    }

				    @Override
				    public int mul(int i, int j) {
				        int result = i * j ;
				        System.out.println(result);
				        return result;
				    }

				    @Override
				    public int div(int i, int j) {
				        int result = i / j ;
				        System.out.println(result);
				        return result;
				    }
				}


	    d.新建一个切面类，这个类用于提供各种通知，在需要的方法上，有选择性地添加不同的注解。

	    	另外，在这个切面类上，我们还要添加两个注解：
		    	@Aspect 			表示这个类是一个切面
		    	@component 			表示这是一个组件

	    	针对切面类中的方法，我们可以选择性地添加以下注解：	
		    	@Before					前置通知；
		    	@After 					后置通知；
		    	@AfterReturning			返回通知；这个通知可以获得返回值
		    	@AfterThrowing		    异常通知；没有异常，这个通知是不会出现的
		    	@Around				    环绕通知；这个通知其实相当于一个包含了前面4种通知的通知，功能很强，但是很少使用

	    	将不同的注解添加到需要的方法上，并且，需要在注解内指定具体的方法
	    	示例：	
	    	@Before("execution(public int com.proxy.springProxy.Calculator.*(..))")

	    	execution表示执行的意思，里面是指定一个具体的方法，也可以使用通配符，指定某个类下的所有方法；
	    	以上的意思是指：
	    	在执行com.proxy.springProxy.Calculator类下的任意方法之前（*后紧跟的是参数列表，我们使用..表示任意参数，也可以具体指定），先指向由@Before注解标记的方法；
	    	如果一个类中的方法的访问限定关键字与返回值各不相同，也可以使用一个通配符*代替任意访问限定关键字，任意返回值。

	    	还有两个对象需要认识一下

	    	JoinPoint 对象
			JoinPoint对象封装了SpringAop中切面方法的信息,在切面方法中添加JoinPoint参数,就可以获取到封装了该方法信息的JoinPoint对象. 
			常用api:
			Signature getSignature();	获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息
			Object[] getArgs();	        获取传入目标方法的参数对象
			Object getTarget();	        获取被代理的对象
			Object getThis();	        获取代理对象


			ProceedingJoinPoint对象
			ProceedingJoinPoint对象是JoinPoint的子接口,该对象只用在@Around的切面方法中, 添加了两个方法. 
			Object proceed() throws Throwable              //执行目标方法 
			Object proceed(Object[] var1) throws Throwable //传入的新的参数去执行目标方法 
			

	    	package com.proxy.springProxy;

				import org.aspectj.lang.JoinPoint;
				import org.aspectj.lang.annotation.After;
				import org.aspectj.lang.annotation.AfterReturning;
				import org.aspectj.lang.annotation.Aspect;
				import org.aspectj.lang.annotation.Before;
				import org.springframework.stereotype.Component;

				import java.util.Arrays;


				@Aspect
				@Component
				public class LoggingAspect {

				    @Before("execution(public int com.proxy.springProxy.Calculator.*(..))")
				    public void logBefore(JoinPoint joinPoint ){
				        System.out.println(joinPoint.getSignature().getName());
				        System.out.println(Arrays.asList(joinPoint.getArgs()));
				        System.out.println("我是前置通知");
				    }

				    @After("execution(public int com.proxy.springProxy.Calculator.*(..))")
				    public void logAfter(){
				        System.out.println("我是后置通知，无论是否发生异常");
				    }

				    @AfterReturning(value = "execution(public int com.proxy.springProxy.Calculator.*(..))",returning = "result")
				    public void logReturning(Object result){
				        System.out.println("我是返回通知" + result);
				    }

				    @AfterThrowing(value = "aspect()",throwing = "e")
				    public void counterThrowing(Exception e){
				        System.out.println("震惊！有一个异常：" + e.toString() );
				    }

				    @AfterReturning(value = "aspect()",returning = "result")
				    public void counterReturning(JoinPoint joinPoint, Object result){
				        System.out.println("听说这个返回通知可以获得结果！使用"+ joinPoint.getSignature().getName()+"方法");
				        System.out.println(joinPoint.getTarget().getClass());
				    }

				    	//注意这里的jointpoint


				    @Around(value = "aspect()")
				    public void counterAround(ProceedingJoinPoint pjd){
				        System.out.println("----------前置通知-----------");
				        System.out.println("获得了target的方法名：" + pjd.getSignature().getName());
				        try {
				            pjd.proceed();					//会自动调用到执行的方法，在环绕通知里，只能使用ProceedingJoinPoint类型的变量，基本这里已经是一个固定的方式了。
				        } catch (Throwable throwable) {
				            throwable.printStackTrace();
				        }
				        System.out.println("----------后置通知----------");
				    }
				}
	

				可以发现一点，就是我们每个方法的注解上，都使用了先相同的冗长的excution，那么我们时候可以使用一个更精简的方式去表示这个参数呢？
				答案当然是有的。我们可以使用个切入点

      
			    //配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点  
			    @Pointcut("execution(* cn.ysh.studio.spring.aop.service..*(..))")  
			    public void aspect(){   } 

			    之后，我们可以这样注解我们的方法：
			    @Before("aspect()")

			   	有一个很重要的参数，JoinPonit，通常，我们声明一个这样的变量：JoinPoint joinPont
			   	这个变量里保存了


	    b.在application.xml中引入AspectJ的命名空间

	    c.激活组件扫描功能
	    	在base-package指向的包及其子包下面自动扫描通过注解配置的组件
	      	也就是我们配置了注解的类所在的包，添加这条标签命令后，会在我们指向的包内进行扫描。

	    	<context:component-scan base-package="com.proxy.springProxy"></context:component-scan>

	    d.激活自动代理功能 
	    	在application.xml中添加标签：<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	   	e.写一个测试类测试一下是否成功。
	   		//添加我们的配置文件
	   		ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]{"application.xml"});
	   		//通过扫描获得一个注解名字叫cc的Bean，并将这个Bean转换为与Calculator相同的类的实例
	   		Calculator calculator = ac.getBean("cc",Calculator.class);
	   		//通过这个返回的实例，使用被代理类的方法
        	calculator.add(1,2);;


     2.自定义注解的方式，为我们使用自定义注解的地方进行拦截

     	以下是简单例子。

     	a.新建一个注解类（idea内可以直接生成注解类的）
     		@Target(ElementType.METHOD)
			@Retention(RetentionPolicy.RUNTIME)
			public @interface Action {
			    String value() ;
			}

			以上
			@Target 表示使用的对象范围，ElementType.METHOD 我们限定了只能用于方法注解
			@Retention 表示这个注解声明周期，RetentionPolicy.RUNNTIME 我们限定了整个运行周期这个注解都存在
			这个注解命名为Action，包含一个成员方法  value()，返回值为String

		b.提供一个配置管理类。我们通过一个java类来管理我们的Bean，在这个例子里，我们的管理类内部不包含任何东西，但是他有几个注解修饰。

			@ComponentScan("aop.annotation")
			@Configuration
			@EnableAspectJAutoProxy     
			public class ActionConfig {
			}

			以上
			@ComponentScan("aop.annotation")		//这个注解表明了组件扫描的范围，在这个包路径下
			@Configuration							//这个注解表示这是一个配置管理类
			@EnableAspectJAutoProxy					//开启AspectJ的自动代理，不开启没法通过这个配置了类进行自动代理

		c.提供一个类，使用Service注解将这个类纳入IoC管理，并为这个类中的方法添加我们的自定义注解@Action
			//这个类中的方法用于被注解拦截
			@Service
			public class AnnotationInterceptClass {

			    @Action(value = "我要拦截你这个方法！！！！")

			    public void test(){

			    }
			}

		d.再提供一个类，使用@Service将这个类纳入IoC管理，但是不添加其他注解。这里主要使用以前的方法规则对类中的方法进行拦截。
			/这个类中的方法会被方法规则拦截
			@Service
			public class MethodInterceptClass {

			    public void method(){

			    }
			}

			c,d是两个对比类；

		f.建立切面类。在这个类中，我们会添加各种通知。为方便说明问题，我只添加了前置通知和后置通知。
			@Aspect
			@Component
			public class NewAspect {

			    @Pointcut("@annotation(aop.annotation.Action)")			//定义了重用切入点方法，这个切入点利用的是注解定位
			    public void cut(){ }

			    @Before("cut()")										
			    public void logBefore(JoinPoint joinPoint){


			        MethodSignature ms = (MethodSignature)joinPoint.getSignature();


			        Action action = ms.getMethod().getAnnotation(Action.class);

			        System.out.println("我是注解方式拦截：" + action.value());
			    }

			    //这个后置通知，切入点依然是我们之前使用的方法规则方式进行拦截
			    @After("execution(* aop.annotation.MethodInterceptClass.*(..))")
			    public void logAfter(JoinPoint joinPoint){
			        MethodSignature ms = (MethodSignature)joinPoint.getSignature();
			        System.out.println("对，我是方法规则拦截：" + ms.getMethod().getName());
			    }
			}


		e.建立一个测试类测试结果。在这里，我们也没有使用常用的ClassPathApplicationContext()方法搭配xml来获得运行时上下文环境，
		因为我们这个测试，都没有使用xml，于是，我们需要改一下我们的获取方式了，使用AnnotationConfigApplicationContext()搭配我们的
		配置管理类来获得具体的运行时上下文环境。

		public class Test {
	    public static void main(String[] args) {
	        AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(ActionConfig.class);

	        ac.getBean(AnnotationInterceptClass.class).annotation();
	        ac.getBean(MethodInterceptClass.class).method();

	        ac.close();  //养成一个习惯，关闭这个对象
	    }	


+----------------------------------------------------------------------------------------------------------------------------------------------+
 

二、Proxy 代理

	代理种类：静态代理（代理种类单一，维护麻烦）  动态代理（优势明显，以不变应万变）
	
	所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。

	1.静态代理的原理


		就相当于让子类扩展父类，在重写的父类的方法中填充入前置增强与后置增强方法。
		但是，直接使用继承，却存在方法设置的随意性问题，要使用静态代理，代理子类必须拥有父类的操作方法，使用接口则具有这样的强制要求。
		因此使用代理子类实现父类接口，就可以保证代理类重写了父类操作方法。

		总结起来，就是，将被代理类写成接口，然后代理类实现被代理类的接口，在代理类中添加增强方法，并且在代理类中的构造器里，创建一个。
		在使用时，直接使用这个代理类即可输出被代理父类接口的操作。
	
		需要：
		a.委托类A，提供抽象方法名
		b.实际工作类B，实现抽象方法，用于具体操作
		c.代理类C，实现委托类A，同时在本类中创建实际工作类B的实例，并在实现的抽象方法中，添加前后直增强，中间有实际工作类进行实际操作方法。

		实际使用时，就是用代理类即可。



	2.动态代理

	动态代理是很神奇的，主要涉及了反射的内容，要理解不要急，要稳住。

	在Java中要想实现动态代理机制，需要java.lang.reflect.InvocationHandler接口和 java.lang.reflect.Proxy 类的支持

	动态代理类只能代理接口（不支持抽象类），代理类都需要实现InvocationHandler类，实现invoke方法。该invoke方法就是调用被代理接口的所有
	方法时需要调用的，该invoke方法返回的值是被代理接口的一个实现类
	对于代理类的任何方法的调用，都会调用invoke()方法；
	

		package com.proxy;
		import org.springframework.cglib.proxy.InvocationHandler;
		import org.springframework.cglib.proxy.Proxy;
		import java.lang.reflect.Method;

		//对于代理类的任何方法的调用，都会调用invoke()方法；

		public class PerformanceDynamicProxy implements InvocationHandler{
		    private Object target;								//由于是不依赖与任何已知的类，我们使用Object来接收
		    public PerformanceDynamicProxy(Object target){		//实例化这个类的时候就需要传入一个target，就是谁被代理
		        this.target = target;
		    }
		    @Override
		    public Object invoke(Object o, Method method, Object[] objects) throws Throwable {
		    	
		    	//在内部不能直接调用这个类的方法，因为对于代理类的任何方法的调用，都会调用invoke()方法；
		    	//那就是无穷无尽的递归了

		        long start = 0, end = 0;
		        start = System.currentTimeMillis();
		        System.out.println(start);

		        method.invoke(target,objects);  //这个方法会自动调用

		        end = System.currentTimeMillis();
		        System.out.println(end);
		        System.out.println("耗时：" +(end - start));
		        return null;
		    }
		    //通过反射再建立一个基于target接口的实现类，对于Proxy.newProxyInstance()有三个参数，利用target对象获得target的类加载器，
		    所实现的接口，还需要传入一个实现了InvocationHandler接口的实例，这里由于将这个操作放在了这个实例里，所以第三个参数我们传入了this。
		    public Object getProxy(){
		        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
		    }
		}

		写一个测试类测试一下我们的动态代理
			import com.proxy.PerformanceDynamicProxy;
			import com.proxy.Work;

			public class PerformanceTest {
			    public static void main(String[] args) {

			    	/*这里因为我们的Work接口只有一个方法，属于函数式接口，因此，我们直接使用Lamda表达式来直接实例化一个类；
			    	（正常情况下，我们需要new Work(){各种类成员}，来创建一个基于Work接口的匿名类） ///////////////////这样做，可以省下一个Work实现类，但是如果Work不是函数式接口，那么就不能这样做了，要按正常流程创建
			    	一个Work实现类*/

			        Work newWorker = ()->{
			            for(long i = 0; i<1000; i++){
			                System.out.println("正在认真工作");
			            }
			            System.out.println("认真工作结束");
			        };

			        //获得以newWorker实例为基础，创建出的newWorker实现的接口的另一个实例（在内部中，实际上使用的是Object类型接收的newWorker实例），
			        //因此，在这里已经是属于向下转型。强转为Work类型，

			        Work handler = (Work)new PerformanceDynamicProxy(newWorker).getProxy();

			        //向下转型成功后，可以愉快地调用他自己的方法了。

			        handler.Working();
			    }
			}

	3.CGlib

	代理一个没有接口的类的时候使用（方法级别的代理））
	CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。
	JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。




	嗯，待续。。。
		