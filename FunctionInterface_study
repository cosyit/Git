JAVA 8 函数接口学习中的一些笔记

面向接口编程已经是一种趋势。

java变量规范是强类型。

一、为什么java 8 要在接口里增加default修饰的默认方法？

	1.因为默认方法的存在，可以允许后来实现这个接口的类，不需要实现所有的方法，可以按需要提取需要的方法重写即可。
	
	2.默认方法的存在，默认方法是自带实现的方法，虽然没有什么内容，但有一个作用，就是让后续新版本的jdk里的接口可以自由的新加方法。试想没有默认方法，在JDK7中，实现了一个接口，然后JDK8中，对这个接口有所改动，新加了一个方法，那么，原来在JDK7里面的项目，就必须增加新方法的实现，这样就很麻烦。有了默认方法之后，旧版本的项目可以不受新版本JDK影响。一句话，为了让新JDK兼容以前的JDK项目。
	
	3.默认方法里，可以调用任意方法。
	
	4.对于同名同参数的方法，父类的优先级比接口更高，子类优先级比父类更高。因此不要在接口中重复定义default方法，例如equal方法，因为类优先原则，永远先使用object中的equal方法。而且编译器也会报错。

二、函数接口注意点

	1.允许有static方法，可以直接调用；
	2.只有唯一的抽象方法。这样才可以使用lambda表达式。直接就定位到这个方法了。允许有多个静态方法；
	3.最好加上@FunctionInterface ，如果是函数式接口，加上这个注解可以有效避免错误。



三、lambda表达式

	1.lambda表达式的基本形式
		(参数) -> {
			{
				方法体
			}
		}

	2.就认为是一个可以传递的代码块,将它看做是函数即可。能做的只是转换为函数式接口。

	3.针对函数式接口使用。而函数式接口里面只有一个抽象方法。系统就可以直接找到需要的方法，并以这个方法的形参类型作为推测的依据。

	4.针对java编译器可以推测的一些解释。
	因为使用的函数式接口只有一个抽象方法，所以java编译器直接就能推测出具体方法。并且根据具体方法的形参列表，反过来又可以找出具体的函数式接口。同时根据不同强类型的参数，需要添加参数的类型。假如参数类型只有一种，那么java编译器也是可以直接推测这个参数类型的，在多个参数类型情况下，则需要手动指定。
	一句话，凡是java编译器可以推测出来的信息（也相当于我们可以推测出来的信息,我们都可以推测了，java编译器当可以），我们都可以省略。
	如果没有参数，甚至（）也可以省略。
	来看一下这个代码，比较器部分使用lambda表达式：
		public static void main(String[] args) {
		    String[] arr = {"1","22","333","4444","55555"};
		    Arrays.sort(arr,(first,second)->first.length() - second.length());
		    System.out.println(Arrays.toString(arr));
		}
	其中，Array.sort()这个方法的声明是这样子的：public static <T> void sort(T[] a, Comparator<? super T> c) 
	跟我们js传入一个函数是很类似的，跟回调函数很像，我们不需要再找到这个方法再修改代码，直接在使用的地方就可以修改了。

	4.就像一个回调函数的变形，可以省下一个类实现。

	5.其实要加入面向接口的编程的语法的时候，java一开始是拒绝的，他不想为了语法简洁而加入某种语法，这样做他认为会导致java变得一团糟。但是后来它终于知道了传入代码块的好处，并在长期的思考中得出了这种适合java的语法方式（lambda）。



 